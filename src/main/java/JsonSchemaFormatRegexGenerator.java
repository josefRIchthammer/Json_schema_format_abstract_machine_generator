import java.util.HashMap;
import java.util.Map;
import javax.script.Invocable;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class JsonSchemaFormatRegexGenerator {
    private static final Map<String,String> FormatMapper= new <String,String>HashMap();

    static {FormatMapper.put("uri","^[a-zA-Z]([a-zA-Z0-9.+-])*:(//((([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:))*@)?(" +
            "\\[(((([0-9A-Fa-f]){1,4}:){6,6}(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|::(([0-9A-Fa-f]){1,4}:){5,5}(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|(([0-9A-Fa-f]){1,4})?::(([0-9A-Fa-f]){1,4}:){4,4}(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|((([0-9A-Fa-f]){1,4}:)?([0-9A-Fa-f]){1,4})?::(([0-9A-Fa-f]){1,4}:){3,3}(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|((([0-9A-Fa-f]){1,4}:){0,2}([0-9A-Fa-f]){1,4})?::(([0-9A-Fa-f]){1,4}:){2,2}(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|((([0-9A-Fa-f]){1,4}:){0,3}([0-9A-Fa-f]){1,4})?::([0-9A-Fa-f]){1,4}:(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|((([0-9A-Fa-f]){1,4}:){0,4}([0-9A-Fa-f]){1,4})?::(([0-9A-Fa-f]){1,4}:([0-9A-Fa-f]){1,4}|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]))|((([0-9A-Fa-f]){1,4}:){0,5}([0-9A-Fa-f]){1,4})?::([0-9A-Fa-f]){1,4}|((([0-9A-Fa-f]){1,4}:){0,6}([0-9A-Fa-f]){1,4})?::)|(v([0-9A-Fa-f]){1,}.([a-zA-Z0-9-._~!$&'()*+,;=:]){1,}))\\]|([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5]).([0-9]|[1-9][0-9]|1([0-9]){2,2}|2[0-4][0-9]|25[0-5])|(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]))*)(:([0-9])*)?(/(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@))*)*|/((([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@)){1,}(/(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@))*)*)?|(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@)){1,}(/(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@))*)*|(([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@)){0,0})(\\?((([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@)|/|\\?))*)?(#((([a-zA-Z0-9-._~]|%[0-9A-Fa-f][0-9A-Fa-f]|[!$&'()*+,;=]|:|@)|/|\\?))*)?$");
    }

    /***
     *  Searches for a regular expression that represents the given format
     * @param format The format for that regular expression is to be found.
     * @return the found regex of the format. "" if no regex exists for this format
     */
    public static String GetRegexForJsonSchemaFormat(String format)
    {
        return FormatMapper.getOrDefault(format, "");
    }

    public static void main(String [] Args) throws ScriptException, NoSuchMethodException {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");
        // JavaScript code in a String
        String script2 = "function evalRegex(regex,evalString) { return new RegExp(regex).test(evalString) }";

        try {
            engine.eval(script2);
        } catch (ScriptException e) {
            e.printStackTrace();
        }

        Invocable inv = (Invocable) engine;
        String regex =GetRegexForJsonSchemaFormat("uri");

        System.out.println( inv.invokeFunction("evalRegex", regex, "a+://[::]"));  //
    }

}
